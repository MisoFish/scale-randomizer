{"ast":null,"code":"import _slicedToArray from \"/Users/LightCycle/git/MisoFish.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/LightCycle/git/MisoFish.github.io/src/components/Randomizer.js\";\nimport React, { useState } from \"react\";\nimport _ from \"lodash\";\nimport { Container, Fab, Typography, Button } from \"@material-ui/core\";\nimport { ArrowForward } from \"@material-ui/icons\";\nimport { SYLLABUS, SECTIONS, SECTIONS_BY_LEVEL } from \"../Constants\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles({\n  root: {\n    width: \"150px\",\n    height: \"150px\"\n  },\n  arrowForward: {\n    width: \"60px\",\n    height: \"60px\"\n  }\n});\n\nconst Randomizer = ({\n  level\n}) => {\n  const classes = useStyles();\n\n  const _useState = useState(\"Let's get started!\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        display = _useState2[0],\n        setDisplay = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        displayLine2 = _useState4[0],\n        setDisplayLine2 = _useState4[1];\n\n  const _useState5 = useState(-1),\n        _useState6 = _slicedToArray(_useState5, 2),\n        counter = _useState6[0],\n        setCounter = _useState6[1];\n\n  const syllabus = SYLLABUS[level];\n  const sectionIndexes = SECTIONS_BY_LEVEL[level];\n  const sections = SECTIONS_BY_LEVEL[level].map(i => SECTIONS[i]);\n  let i = counter; //console.log('set i to counter');\n\n  const onButtonClick = () => {\n    if (i >= sections.length - 1) {\n      setDisplay(\"You have completed one set!\");\n      setDisplayLine2(\"How about another?\");\n      setCounter(-1);\n    } else {\n      //console.log(i);\n      i++; //console.log(i);\n\n      let randomKey = \"\";\n      let keys = Object.keys(syllabus);\n\n      while (!randomKey) {\n        randomKey = keys[keys.length * Math.random() << 0];\n\n        if (!syllabus[randomKey].includes(sectionIndexes[i])) {\n          randomKey = \"\";\n        }\n      }\n\n      setDisplay(\"\".concat(randomKey, \" \").concat(sections[i][0]));\n      setDisplayLine2(sections[i][1]);\n      setCounter(i);\n    }\n  };\n\n  return React.createElement(Container, {\n    maxWidth: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, display), React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, displayLine2), React.createElement(\"div\", {\n    style: {\n      marginTop: \"25px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Fab, {\n    className: classes.root,\n    color: \"primary\",\n    onClick: onButtonClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(ArrowForward, {\n    className: classes.arrowForward,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: onButtonClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Next\"))));\n};\n\nexport default Randomizer;","map":{"version":3,"sources":["/Users/LightCycle/git/MisoFish.github.io/src/components/Randomizer.js"],"names":["React","useState","_","Container","Fab","Typography","Button","ArrowForward","SYLLABUS","SECTIONS","SECTIONS_BY_LEVEL","makeStyles","useStyles","root","width","height","arrowForward","Randomizer","level","classes","display","setDisplay","displayLine2","setDisplayLine2","counter","setCounter","syllabus","sectionIndexes","sections","map","i","onButtonClick","length","randomKey","keys","Object","Math","random","includes","textAlign","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport _ from \"lodash\";\nimport { Container, Fab, Typography, Button } from \"@material-ui/core\";\nimport { ArrowForward } from \"@material-ui/icons\";\nimport { SYLLABUS, SECTIONS, SECTIONS_BY_LEVEL } from \"../Constants\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"150px\",\n    height: \"150px\"\n  },\n  arrowForward: {\n    width: \"60px\",\n    height: \"60px\"\n  }\n});\n\nconst Randomizer = ({ level }) => {\n  const classes = useStyles();\n\n  const [display, setDisplay] = useState(\"Let's get started!\");\n  const [displayLine2, setDisplayLine2] = useState(\"\");\n  const [counter, setCounter] = useState(-1);\n\n  const syllabus = SYLLABUS[level];\n\n  const sectionIndexes = SECTIONS_BY_LEVEL[level];\n  const sections = SECTIONS_BY_LEVEL[level].map(i => SECTIONS[i]);\n\n  let i = counter;\n  //console.log('set i to counter');\n\n  const onButtonClick = () => {\n    if (i >= sections.length - 1) {\n      setDisplay(\"You have completed one set!\");\n      setDisplayLine2(\"How about another?\");\n      setCounter(-1);\n    } else {\n      //console.log(i);\n\n      i++;\n      //console.log(i);\n      let randomKey = \"\";\n      let keys = Object.keys(syllabus);\n\n      while (!randomKey) {\n        randomKey = keys[(keys.length * Math.random()) << 0];\n        if (!syllabus[randomKey].includes(sectionIndexes[i])) {\n          randomKey = \"\";\n        }\n      }\n      setDisplay(`${randomKey} ${sections[i][0]}`);\n      setDisplayLine2(sections[i][1]);\n      setCounter(i);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <div style={{ textAlign: \"center\" }}>\n        <Typography variant=\"h5\">{display}</Typography>\n        <Typography variant=\"h5\">{displayLine2}</Typography>\n        <div style={{ marginTop: \"25px\" }}>\n          <Fab className={classes.root} color=\"primary\" onClick={onButtonClick}>\n            <ArrowForward className={classes.arrowForward} />\n          </Fab>\n        </div>\n        <div>\n          <Button color=\"primary\" onClick={onButtonClick}>\n            Next\n          </Button>\n        </div>\n      </div>\n    </Container>\n  );\n};\n\nexport default Randomizer;\n"]},"metadata":{},"sourceType":"module"}